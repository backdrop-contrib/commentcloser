<?php

/**
 * @file
 * commentcloser.module
 * Automatically close comments on nodes beyond a configurable age.
 */

/**
 * Implements hook_menu().
 */
function commentcloser_menu() {
  $items['admin/config/content/commentcloser'] = array(
    'title' => 'Comment Closer',
    'description' => 'Set age, frequency and types of nodes for which comments will be closed.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('commentcloser_settings_form'),
    'access arguments' => array('administer comment closer'),
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function commentcloser_permission() {
  return array(
    'administer comment closer' => array(
      'title' => t('Administer automatic comment closing.'),
    ),
  );
}

/**
* Implements hook_config_info().
*/
function commentcloser_config_info() {
  $prefixes['commentcloser.settings'] = array(
    'label' => t('Comment Closer'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}

/**
 * Get a list of option settings for each node type.
 *
 * @return
 *  An array of data???
 */
function _commentcloser_nodeoptions() {
  $nodeoptions = &backdrop_static(__FUNCTION__, array());
  if (!$nodeoptions) {
    $nodetypes = node_type_get_names();
    $config = config('commentcloser.settings');
    foreach ($nodetypes as $type => $name) {
      $age_unit = $config->get("$type.commentcloser.age_unit");
      $age_num = $config->get("$type.commentcloser.age_number");
      $com_limit = $config->get("$type.comment_limit");

      if ($age_num || $com_limit) {
        $limits = array();
        if ($age_num) {
          $limits[] = $age_num . ' ' . t($age_unit);
        }
        if ($com_limit) {
          $limits[] = $com_limit . ' ' . t('comments');
        }
        $nodeoptions[$type] = t('@name (@age) <a href="!edit">edit</a>',
          array(
            '@name' => $name,
            '@age' => implode(', ', $limits),
            '!edit' => url("admin/structure/types/manage/$type", array('query' => backdrop_get_destination())),
          ));
      }
    }
  }

  return $nodeoptions;
}

/**
 * Settings form.
 */
function commentcloser_settings_form($form, &$form_state) {
  $config = config('commentcloser.settings');
  $form = array();
  $noyes = array(t('No'), t('Yes'));

  $cycle_length_list = array(
//    0 => 0,             // Never
    900 => 900,         // 15 mins
    1800 => 1800,       // 30 mins
    3600 => 3600,       // 1 hour
    7200 => 7200,       // 2 hours
    10800 => 10800,     // 3 hours
    14400 => 14400,     // 4 hours
    21600 => 21600,     // 6 hours
    28800 => 28800,     // 8 hours
    43200 => 43200,     // 12 hours
    86400 => 86400,     // 1 day
    172800 => 172800,   // 2 days
    259200 => 259200,   // 3 days
    604800 => 604800,   // 1 week
    );
  $cycle_length_list = array_map('format_interval', $cycle_length_list);
  $cycle_length_list[0] = t('Do not run');
  ksort($cycle_length_list);

  $form['commentcloser_types'] = array(
    '#type' => 'item',
    '#title' => t('Currently enabled content types'),
    '#markup' => theme('item_list', array('items' => _commentcloser_nodeoptions())),
  );

  $form['commentcloser_cycle_period'] = array(
    '#type' => 'select', '#size' => 3,
    '#title' => t('Run every'),
    '#default_value' => $config->get('cycle_period'),
    '#options' => $cycle_length_list,
    '#attributes' => array('class' => array('container-inline')),
    '#description' => t('This is the interval for running the comment close check. It will run at the next Cron cycle after this time elapses. <strong>Note</strong> that comments may stay open for this interval <u>longer</u> than specified for the content type.'),
    );

  $form['commentcloser_user_block'] = array(
    '#type' => 'radios',
    '#title' => t('Disable comments for blocked users'),
    '#default_value' => $config->get('user_block'),
    '#options' => $noyes,
    '#attributes' => array('class' => array('container-inline')),
    '#description' => t('If you choose yes, the content types selected above for any user who is blocked will have comments disabled. This happens at the time the user is blocked.'),
    );

    // Add a submit button
  $form['actions']['#type'] = 'actions';
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save configuration'),
  );

  return $form;
}

/**
 * Submit handler for module_settings_form().
 */
function commentcloser_settings_form_submit($form, &$form_state) {
  $config = config('commentcloser.settings');
  $config->set('cycle_period', $form_state['values']['commentcloser_cycle_period']);
  $config->set('user_block', $form_state['values']['commentcloser_user_block']);
  $config->save();

  backdrop_set_message(t('The configuration options have been saved.'));
}

/**
 * Implements hook_node_view().
 *
 * Show a message about when the closing will happen.
 */
function commentcloser_node_view($node, $view_mode, $langcode) {
  $config = config('commentcloser.settings');
  // If we are on a cc node type and have enabled the notice, display it.
  if ($config->get($node->type . '.age_number')
      && $config->get($node->type . '.notice') == 1) {
    if ($view_mode == 'full') {
      $node->content['commentcloser'] = array(
        'notice' => array('#markup' => theme('commentcloser_notice', array('node' => $node))),
        // Put it at the bottom, close to the comments.
        '#weight' => 10,
      );
    }
  }
}

/**
 * Display a notice on nodes that comments will close.
 */
function theme_commentcloser_notice($variables) {
  $config = config('commentcloser.settings');
  $node = $variables['node'];
  // TODO: Should this theme commentcloser_notice be declared in hook_theme()?
  $age_num = $config->get($node->type . '.age_number');
  $age_unit = $config->get($node->type . '.age_unit');
  $type = node_type_get_name($node);

  // Is commenting active now?
  if ($node->comment == COMMENT_NODE_OPEN) {
    $when = strtotime("+$age_num $age_unit", $node->created);

    $output = '<p class="comment-closer-notice">' . t('Commenting on this @type will be automatically' .
      ' closed on !when.',
      array(
        '!when' => format_date($when, 'custom', 'F j, Y'),
        '@type' => $type,
      )
    ) . '</p>';
  }
  else {
    $output = '<p class="comment-closer-notice">' . t('Commenting on this @type is closed.',
      array('@type' => $type)) . '</p>';
  }

  return $output;
}

/**
 * Implements hook_cron().
 */
function commentcloser_cron() {
  // Is it time to do anything?
  if (!commentcloser_check_cron()) {
    return;
  }

  // Abstracted the close function for easier unit testing.
  commentcloser_close_all();
}

/**
 * Determine if cron should be run.
 *
 * @param $set_next_cron
 *   Boolean indicator whether to set the time of the next cron run. Defaults to
 *   TRUE, but can be disabled for testing.
 *
 * @return
 *   Boolean TRUE or FALSE.
 */
function commentcloser_check_cron($set_next_cron = TRUE) {
  $now = REQUEST_TIME;
  $next_cycle_time = state_get('commentcloser_next_date', $now);
  $period = config_get('commentcloser.settings', 'cycle_period');

  // Do we need to run this now?
  if (!empty($next_cycle_time) && $now < $next_cycle_time || $period == 0) {
    // Do it again tomorrow?
    if ($set_next_cron) {
      state_set('commentcloser_next_date', $next_cycle_time + $period);
    }
    return TRUE;
  }
  return FALSE;
}

/**
 * Close all comments that meet the current threshold.
 *
 * @param $now
 *  A UNIX timestamp for the expiration time.
 */
function commentcloser_close_all($now = NULL) {
  $config = config('commentcloser.settings');
  if (is_null($now)) {
    $now = REQUEST_TIME;
  }
  $content_types = node_type_get_names();

  foreach ($content_types as $type => $name) {
    // Set it up.
    $age_num = $config->get($type . '.age_number');
    $age_unit = $config->get($type . '.age_unit');
    $com_limit = $config->get($type . '.comment_limit');

    // If an age number is set, do this one.
    if ($age_num) {
      $oldest_allowed = _commentcloser_oldest_allowed($age_unit, $age_num, $now);

      // Knock it out.
      // Count the rows affected.
      $result = db_query("SELECT nid FROM {node} WHERE created < :oldest AND type = :type AND comment = :comment",
        array(':oldest' => $oldest_allowed, ':type' => $type, ':comment' => COMMENT_NODE_OPEN)
      );
      $nids = $result->fetchCol();

      // Update those rows.
      foreach($nids as $nid) {
        $node = node_load($nid);
        $node->comment = COMMENT_NODE_CLOSED;
        node_save($node);
      }

      $count  = $result->rowCount();
      if ($count) {
        $vars = array(
          '!count' => $count,
          '@type' => $name,
          '!date' => format_date($oldest_allowed),
        );
        $msg = 'Closed comments on !count @type posts created at, or before, !date.';
        watchdog('commentcloser', $msg, $vars, WATCHDOG_NOTICE);
      }
    }

    // If a comment limit is set, do this one.
    if ($com_limit) {
      // Count the rows affected.
      $result = db_query("SELECT n.nid FROM {node} n
        INNER JOIN {node_comment_statistics} ncs ON n.nid = ncs.nid
        WHERE n.type = :type AND ncs.comment_count >= :limit AND n.comment = :comment",
        array(':type' => $type, ':limit' => $com_limit, ':comment' => COMMENT_NODE_OPEN)
      );

      // Update those rows.
      $nids = $result->fetchCol();

      // Update those rows.
      foreach($nids as $nid) {
        $node = node_load($nid);
        $node->comment = COMMENT_NODE_CLOSED;
        node_save($node);
      }

      $count  = $result->rowCount();
      if ($count) {
        $vars = array(
          '!count' => $count,
          '@type' => $name,
          '!com_count' => number_format($com_limit),
        );
        $msg = 'Closed comments on !count @type post with at least !com_count comments.';
        watchdog('commentcloser', $msg, $vars, WATCHDOG_NOTICE);
      }
    }
  }
}

/**
 * Helper function for generating date from age interval.
 */
function _commentcloser_oldest_allowed($unit, $num, $now = NULL) {
  if (!in_array($unit, array('day', 'week', 'month', 'year'))) {
    backdrop_set_message(t('Invalid unit ("@unit")', array('@unit' => $unit)));
  }

  if ($num == 0) {
    return 0;
  }

  if (empty($now)) {
    $now = isset($_SERVER['REQUEST_TIME']) ? $_SERVER['REQUEST_TIME'] : REQUEST_TIME;
  }

  return strtotime("-$num $unit", $now);
}

/**
 * Implements hook_theme().
 */
function commentcloser_theme($existing, $type, $theme, $path) {
  return array(
    'commentcloser_notice' => array('variables' => array('node' => NULL)),
  );
}

/**
 * Implements hook_user_update().
 */
function commentcloser_user_update(&$edit, $account, $category) {
  $config = config('commentcloser.settings');
  if ($config->get('user_block', 0) && $account->status == 1 && $edit['status'] == 0) {
    $all_types = node_type_get_names();
    $node_types = array();

    // Process enabled content types.
    foreach ($all_types as $type => $name) {
      if ($config->get($type . '.age_number')) {
        $query = "UPDATE {node} SET comment = 1 WHERE comment = 2 AND uid = %d AND type = '%s'";
        // TODO Please review the conversion of this statement to the D7 database API syntax.
        /* db_query($query, $account->uid, $type) */
        db_update('node')
          ->fields(array(
            'comment' => 1,
          ))
          ->condition('comment', 2)
          ->condition('uid', $account->uid)
          ->condition('type', $type)
          ->execute();
        $count = db_affected_rows();
        if ($count) {
          backdrop_set_message(t('Comments were closed on @count @types posts.',
            array('@count' => $count, '@types' => $name)));
        }
      }
    }
  }
}

/**
 * Helper function for building a list an "and" before the last item.
 */
function _commentcloser_type_list($list) {
  $last = array_pop($list);
  return implode(', ', $list) . (count($list) > 1 ? ',' : NULL) . " and $last";
}

/**
 * Implements hook_form_alter().
 *
 * Add the settings to the node edit form.
 */
function commentcloser_form_node_type_form_alter(&$form, &$form_state) {
  $noyes = array(t('No'), t('Yes'));
  $config = config('commentcloser.settings');

  $type = $form['#node_type']->type;

  $form['commentcloser'] = array(
    '#type' => 'fieldset',
    '#title' => t('Comment closer'),
    '#group' => 'additional_settings',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#access' => user_access('administer comment closer'),
  );

  $form['commentcloser']['commentcloser_age'] = array(
    '#type' => 'fieldset',
    '#title' => t('Close commenting after'),
    '#description' => t('A number of days, weeks, months, or years before which new comments will be disabled. A value of 0 means to not close comments. This is only effective when comments are "Open" (see above). Note: there is no check for the date being beyond the limit of a Unix timestamp (2038).'),
  );

  $units = array(
    'day' => t('days'),
    'week' => t('weeks'),
    'month' => t('months'),
    'year' => t('years'),
  );

  $form['commentcloser']['commentcloser_age']['commentcloser_age_number'] = array(
    '#type' => 'textfield',
    '#size' => 4,
    '#maxlength' => 2,
    '#default_value' => $config->get($type . '.age_number'),
    '#element_validate' => array('_commentcloser_age_validate'),
  );

  $form['commentcloser']['commentcloser_age']['commentcloser_age_unit'] = array(
    '#type' => 'select',
    '#options' => $units,
    '#default_value' => $config->get($type . '.age_unit'),
  );

  $form['commentcloser']['commentcloser_age']['or'] = array(
    '#markup' => '<p><strong>' . t('- Or -') . '</strong></p>',
  );

  $form['commentcloser']['commentcloser_age']['commentcloser_comment_limit'] = array(
    '#type' => 'textfield',
    '#size' => 4,
    '#maxlength' => 4,
    '#field_suffix' => t('comments'),
    '#default_value' => $config->get($type . '.comment_limit'),
    '#description' => t('If the post receives this many comments, close off further commenting. Leave this at zero (0) for no limit.'),
  );

  // *****************************
  $form['commentcloser']['commentcloser_notice'] = array(
    '#type' => 'radios',
    '#title' => t('Display close notice on posts'),
    '#options' => $noyes,
    '#attributes' => array('class' => array('container-inline')),
    '#default_value' => $config->get($type . '.notice'),
    '#description' => t('Checking "yes" will automatically display a notice at the bottom of all posts of enabled content types that states when comments will be closed.'),
  );
  $form['#submit'][] = 'commentcloser_node_type_form_submit';
}

/**
 * Submit handler for node type form.
 */
function commentcloser_node_type_form_submit($form, &$form_state) {
  $config = config('commentcloser.settings');
  $config->set($form_state['values']['type'] . '.age_number', $form_state['values']['commentcloser_age_number']);
  $config->set($form_state['values']['type'] . '.age_unit', $form_state['values']['commentcloser_age_unit']);
  $config->set($form_state['values']['type'] . '.comment_limit', $form_state['values']['commentcloser_comment_limit']);
  $config->set($form_state['values']['type'] . '.notice', $form_state['values']['commentcloser_notice']);
  $config->save();
}

/**
 * Form element validation to ensure proper data.
 */
function _commentcloser_age_validate($element, &$form_state) {
  $age = $element['#value'];
  if (!is_numeric($age) || $age < 0 || $age != intval($age)) {
    form_error($element, t('The field "Close commenting after" should be a positive integer.'));
  }
}
