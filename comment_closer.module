<?php
// $Id$
/**
 * @file
 * comment_closer.module
 * Automatically close comments on nodes beyond a configurable age
 */
function comment_closer_help($path, $arg) {
  switch ($path) {
    case 'admin/block/help':
      return t('<p>Automatically close comments</p>');
      break;
    case "admin/modules#description":
      $output = t('Schedule automatic closing of comments for selected node types based on the age of the node');
      break;
    case "admin/help#comment_closer":
      $output = t('<p>The commentcloser module allows you to automatically close comments via a cron hook. You can select any combination of available node types to process,</p><p>Configure the module to close comments on nodes more than one week, month or year old and schedule the closings to be done daily, weekly, monthly or annually</p>

      ');
      break;
    default:
      $output = "";
      break;
  }
  return $output;
}

function _comment_closer_nodeoptions() {
  static $nodeoptions = array();
  if (!count($nodeoptions)) {
    $nodetypes = node_get_types();
    foreach ($nodetypes as $key => $value) {
      $nodeoptions[$key] = $value->name;
    }
  }
  return $nodeoptions;
}

function _comment_closer_age_options() {
  return array(
    'year',
    'month',
    'quarterly',
    'week',
  );
}

function comment_closer_settings() {
  $cc_form = array();

  $cycle_length_list = array(
    'yearly' => t('yearly'),
    'monthly' => t('monthly'),
    'quarterly' => t('quarterly'),
    'weekly' => t('weekly'),
    'daily' => t('daily')
  );

  $cc_form['comment_closer_types'] = array(
    '#type' => 'select',
    '#multiple' => '1',
    '#title' => t('Node types'),
    '#default_value' => variable_get('comment_closer_types', array()),
    '#options' => _comment_closer_nodeoptions(),
  );
  $cc_form['comment_closer_age'] = array(
    '#type' => 'textfield',
    '#title' => t('Older than'),
    '#description' => t('A number of days, or one of the following words: year, quarterly, month, week.'),
    '#default_value' => variable_get('comment_closer_age', 'month'),
    '#size' => 10,
    '#required' => TRUE,
  );
  $cc_form['comment_closer_cycle_period'] = array(
    '#type' => 'select',
    '#title' => t('Execute'),
    '#default_value' => variable_get('comment_closer_cycle_period', array('daily')),
    '#options' => $cycle_length_list,
  );
  return system_settings_form($cc_form);
}

function comment_closer_settings_validate($form, &$form_state) {
  $age = $form_state['values']['comment_closer_age'];
  if (!in_array($age, _comment_closer_age_options()) && !preg_match('/^\d+$/', $age)) {
    form_set_error('comment_closer_age', t('The field "Older than" should be a positive number of days, or one of the following words: year, quarterly, month, week.'));
  }
}

function comment_closer_cron() {

  $now = time();
  $current_date = getdate($now);
  $next_cycle_time = variable_get('comment_closer_next_date', $now);
  $process_node_type_list = variable_get('comment_closer_types', 0);

  if ($now >= $next_cycle_time) {
    //set it up
    $limit = variable_get('comment_closer_age', 'month');
    switch ($limit) {
      case 'month': {
        $current_date['mon'] = $current_date['mon'] - 1;
        break;
      }
        case 'quarterly': {
        $current_date['mon'] = $current_date['mon'] - 3;
        break;
      }
      case 'year': {
        $current_date['year'] = $current_date['year'] - 1;
        break;
      }
      case 'week': {
        $current_date['mday'] = $current_date['mday'] - 7;
        break;
      }
      default: {
        if (preg_match('/^\d+$/', $limit) && (int)$limit > 0) {
          $current_date['mday'] = $current_date['mday'] - (int)$limit;
        }
        else { // default to 1 month
          $current_date['mon'] = $current_date['mon'] - 1;
        }
        break;
      }
    }
    $oldest_allowed = mktime($current_date['hours'], $current_date['minutes'], $current_date['seconds'], $current_date['mon'], $current_date['mday'], $current_date['year']);

    watchdog('comment_closer', 'date_max :'. date('d/m/Y H:i', $oldest_allowed), array(), WATCHDOG_DEBUG);

    // knock it out
    $args = array();
    $query = "UPDATE {node} SET comment = 1 WHERE (created < %d)";
    $args[] = $oldest_allowed;
    if (!empty($process_node_type_list) && is_array($process_node_type_list)) {
      $query .= " AND type IN (". db_placeholders($process_node_type_list) .")";
      $args = array_merge($args, $process_node_type_list);
    }
    cache_clear_all();
    $result = db_query($query, $args);
    $msg = 'sql = %sql';
    $vars = array( '%sql' => $query );
    watchdog('comment_closer', $msg, $vars, WATCHDOG_DEBUG);
    // clean it up
    $current_date = getdate();

    switch (variable_get('comment_closer_cycle_period', 'weekly')) {
        case 'monthly': {
          $current_date['mon'] = $current_date['mon'] + 1;
          break;
        }
        case 'quarterly': {
          $current_date['mon'] = $current_date['mon'] + 3;
          break;
        }
        case 'yearly': {
          $current_date['year'] = $current_date['year'] + 1;
          break;
        }
        case 'weekly': {
          $current_date['mday'] = $current_date['mday'] + 7;
          break;
        }
        case 'daily': {
          $current_date['mday'] = $current_date['mday'] + 1;
          break;
        }
    }
    $comment_closer_next_date = mktime($current_date['hours'], $current_date['minutes'], $current_date['seconds'], $current_date['mon'], $current_date['mday'], $current_date['year']);
    variable_set('comment_closer_next_date', $comment_closer_next_date);
  }
}

function comment_closer_menu() {
  $items['admin/settings/comment_closer'] = array(
    'title' => 'Comment closer',
    'description' => 'Set age, frequency and types of nodes for which comments will be closed.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('comment_closer_settings'),
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}
